@page "/register"
@inject IAuthService AuthService
@inject ICartService CartService
@inject NavigationManager NavManager

<PageTitle>User Registration</PageTitle>
<h3>User Registration</h3>

<EditForm Model="user" OnValidSubmit="HandleReg">
    <DataAnnotationsValidator/>
    <div class="m-4">
        <div class="mb-2">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="user.Email" class="form-control"/>
            <ValidationMessage For="@(()=>user.Email)"/>
        </div>
        <div class="mb-2">
            <label for="password">Password</label>
            <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
            <ValidationMessage For="@(()=>user.Password)"/>
        </div>
        <div class="mb-2">
            <label for="confirmPassword">Confirm Password</label>
            <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" class="form-control" type="password" />
            <ValidationMessage For="@(()=>user.ConfirmPassword)" />
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
        <div class="@messageCss">
            @message
        </div>
    </div>
</EditForm>

@code {
    UserRegistration user = new UserRegistration();

    string message = string.Empty;
    string messageCss = string.Empty;
    async void HandleReg(){
        var result = await AuthService.Register(user);
        message = result.Message;
        if(!result.Success){
            messageCss = "text-danger";
        }
        else{
            messageCss = "text-success";
        }

    }

    protected override async void OnInitialized(){
        if(await AuthService.IsUserAuthenticated()){
            NavManager.NavigateTo("/");
        }
    }
}
