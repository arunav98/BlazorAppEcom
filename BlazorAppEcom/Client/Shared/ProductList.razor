@inject IProductServices ProductService
@implements IDisposable

<h5>Shop</h5>
@if(ProductService.Products == null || ProductService.Products.Count == 0){
    <span>@ProductService.Message</span>
}
else{
    <div class="container text-center">
    
        <div class="row">
            @foreach (var product in ProductService.Products){
                <div class="col">
                    <a href="/product/@product.Id">
                    <img src="@product.ImageUrl" alt="@product.Id" class="movieImage"/>
                    </a>
                    <!--<p class="">@product.Description</p>-->

                    <h5><b>@product.Title<br></b></h5>
                    <p class="price m-2">@GetProductPriceText(product)</p>
                </div>
            }
        
        </div>
    </div>
        for (var i = 1; i <= ProductService.PageCount; i++)
        {
            <a class="btn @(i == ProductService.CurrentPage ?"btn-info":"btn-outline-info") page-selection"
            href="/search/@ProductService.LastQuery/@i">@i</a>
        }
    
}

@code {
    protected override void OnInitialized()
    {
        //action to invoke when there is a change in the data
        ProductService.OnProductChange += StateHasChanged;
    }
    public void Dispose(){
        ProductService.OnProductChange -= StateHasChanged;
    }

    private string GetProductPriceText(Product product){
        var variant = product.Variants;
        if (variant.Count == 0)
            return string.Empty;
        else if (variant.Count == 1)
            return $"${variant[0].Price}";
        else
            return $"Starting at ${variant.Min(v => v.Price)}";
    }
}
